{"version":3,"sources":["in-viewport-class.min.js"],"names":["window","document","elements","element","className","classList","hasClass","contains","test","addClass","removeClass","replace","RegExp","split","join","storeElements","getElementsByClassName","WATCH_CLASS","update","viewportTop","pageYOffset","documentElement","scrollTop","clientHeight","body","viewportBottom","innerHeight","i","len","length","isInViewport","IN_VIEWPORT_CLASS","ONCE_IN_VIEWPORT_CLASS","WAS_IN_VIEWPORT","elementRect","getBoundingClientRect","elementTop","onreadystatechange","addEventListener"],"mappings":"cAAA,SAAAA,EAAAC,GAQI,SAAIC,EAAJC,EAAAC,GAGI,OAAID,EAAQE,UADPC,EAASH,UAASC,SAAWA,GAEvBD,IAAAA,OAAQE,QAAUE,EAASH,QAAlC,MAAAI,KAAAL,EAAAC,WAIP,SAAAK,EAAAN,EAAAC,GAGG,OAAID,EAAQE,UADPI,EAASN,UAASC,IAA3BA,GAEeD,EAAQE,WAAR,IAAsBD,EAIpC,SAAAM,EAAAP,EAAAC,GAGG,OAAID,EAAQE,UADPK,EAAYP,UAASC,OAA9BA,GAISD,EAAAC,UAAAD,EAAAC,UAAAO,QAAA,IAAAC,OAAA,UAAAR,EAAAS,MAAA,KAAAC,KAAA,KAAA,UAAA,MAAA,KAKT,SAASC,IAATb,EAASa,EAATC,uBAAyBC,GAIzB,SAASC,IAKL,IAAI,IALRC,EAAkBnB,EAAAoB,aAAAnB,EAAAoB,gBAAAC,UACVH,EAAcnB,GAAAA,EAAsBC,aAASoB,EAAgBC,gBAAjEC,cAAAtB,EAAAuB,KAAAD,cACIE,EAAAA,EAAiBN,aAAenB,EAAO0B,gBAAezB,UAGlD0B,EAAE,EAAGC,EAAM1B,EAAS2B,OAAQF,EAAIC,EAAKD,GAAI,EAAG,CAApD,IAAIxB,EAASyB,EAAM1B,IAGX,IAAS4B,EAAa3B,EAASmB,EAAWH,EAAaM,GAAvDnB,EAASwB,EAAa3B,KAClBM,EAACH,EAAAyB,GAGIzB,EAASH,EAAS6B,IAAnBvB,EAACH,EAAA0B,IAIN1B,EAAAH,EAAA4B,KACCzB,EAASH,EAAS4B,GAGbzB,EAASH,EAAS8B,IAAnBxB,EAACH,EAAA2B,KAQrB,SAASH,EAAa3B,EAASmB,EAAWH,EAAaM,GAAvD,IACQS,EADc/B,EAAtBgC,wBAC8BA,IAAAA,EAI1B,OAHiBD,EAAA/B,EAAkBmB,cAGdH,GAAeiB,EAAaX,EArErD,IAAMR,EAAc,MADvBc,EAAsB,cACbd,EAAN,mBACMc,EAAoB,kBAEpBE,KAsENhC,EAASoC,mBAAqB,WAAA,gBAA9BpC,EAASoC,aACDpC,IAGAD,EAAOsC,iBAAiB,SAAUpB,GAAlClB,EAAOsC,iBAAiB,SAAUpB,GAGlCA,MAnFZ,CAuFGlB,OAAQC","file":"in-viewport-class.min.js","sourcesContent":["/*jshint esversion: 6 */\n\n((window, document) => {\n    const WATCH_CLASS = 'i-v';\n    const IN_VIEWPORT_CLASS = 'in-viewport';\n    const ONCE_IN_VIEWPORT_CLASS = 'in-viewport-once';\n    const WAS_IN_VIEWPORT = 'was-in-viewport';\n\n    let elements = [];\n\n    function hasClass(element, className) {\n        if (element.classList) {\n            return element.classList.contains(className);\n        } else {\n            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n        }\n    }\n\n    function addClass(element, className) {\n        if (element.classList) {\n            return element.classList.add(className);\n        } else {\n            return element.className += ' ' + className;\n        }\n    }\n\n    function removeClass(element, className) {\n        if (element.classList) {\n            return element.classList.remove(className);\n        }\n        else {\n           return element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n    }\n\n    function storeElements() {\n        elements = document.getElementsByClassName(WATCH_CLASS);\n    }\n\n    function update() {\n        let viewportTop = window.pageYOffset || document.documentElement.scrollTop;\n        let viewportBottom = viewportTop + (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight);\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n        for(let i=0, len = elements.length; i < len; i+= 1) {\n            let element = elements[i];\n\n            if (true === isInViewport(element, scrollTop, viewportTop, viewportBottom)) {\n                if (!hasClass(element, IN_VIEWPORT_CLASS)) {\n                    addClass(element, IN_VIEWPORT_CLASS);\n\n                    if (!hasClass(element, ONCE_IN_VIEWPORT_CLASS)) {\n                        addClass(element, ONCE_IN_VIEWPORT_CLASS);\n                    }\n                }\n            } else {\n                if (hasClass(element, IN_VIEWPORT_CLASS)) {\n                    removeClass(element, IN_VIEWPORT_CLASS);\n\n                    if (!hasClass(element, WAS_IN_VIEWPORT)) {\n                        addClass(element, WAS_IN_VIEWPORT);\n                    }\n                }\n            }\n        }\n    }\n\n    function isInViewport(element, scrollTop, viewportTop, viewportBottom) {\n        let elementRect = element.getBoundingClientRect();\n        let elementTop = elementRect.top + scrollTop;\n        let elementBottom = elementTop + element.offsetHeight;\n\n        if (elementBottom >= viewportTop && elementTop < viewportBottom) return true;\n        return false;\n    }\n\n    document.onreadystatechange = () => {\n        if (document.readyState === 'interactive') {\n            storeElements();\n\n            window.addEventListener('scroll', update);\n            window.addEventListener('resize', update);\n\n            update();\n      }\n    };\n\n})(window, document);"]}